"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/fire-detection/page",{

/***/ "(app-pages-browser)/./src/lib/api.ts":
/*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiClient: function() { return /* binding */ apiClient; },\n/* harmony export */   formatFireDate: function() { return /* binding */ formatFireDate; },\n/* harmony export */   formatFireTime: function() { return /* binding */ formatFireTime; },\n/* harmony export */   getConfidenceBg: function() { return /* binding */ getConfidenceBg; },\n/* harmony export */   getConfidenceColor: function() { return /* binding */ getConfidenceColor; },\n/* harmony export */   getPowerSeverityBg: function() { return /* binding */ getPowerSeverityBg; },\n/* harmony export */   getPowerSeverityColor: function() { return /* binding */ getPowerSeverityColor; },\n/* harmony export */   getPowerSeverityLabel: function() { return /* binding */ getPowerSeverityLabel; }\n/* harmony export */ });\nconst API_BASE_URL = \"http://localhost:8000\" || 0;\nclass ApiClient {\n    async request(endpoint) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const url = \"\".concat(this.baseUrl).concat(endpoint);\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                ...options.headers\n            },\n            ...options\n        };\n        try {\n            const response = await fetch(url, config);\n            if (!response.ok) {\n                const errorData = await response.json().catch(()=>({\n                        detail: \"HTTP \".concat(response.status, \": \").concat(response.statusText)\n                    }));\n                throw new Error(errorData.detail || \"API request failed\");\n            }\n            return await response.json();\n        } catch (error) {\n            if (error instanceof Error) {\n                throw error;\n            }\n            throw new Error(\"Network error or invalid response\");\n        }\n    }\n    async detectFires(filters) {\n        return this.request(\"/api/fires/detect\", {\n            method: \"POST\",\n            body: JSON.stringify(filters)\n        });\n    }\n    async getFireStatistics() {\n        let region = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"all-northern-india\", dateRange = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"24hr\";\n        return this.request(\"/api/fires/statistics?region=\".concat(encodeURIComponent(region), \"&date_range=\").concat(encodeURIComponent(dateRange)));\n    }\n    async getAvailableRegions() {\n        return this.request(\"/api/fires/regions\");\n    }\n    async getAvailableDateRange() {\n        return this.request(\"/api/fires/date-range\");\n    }\n    // Prediction API methods\n    async generatePredictions(filters) {\n        return this.request(\"/api/predictions/generate\", {\n            method: \"POST\",\n            body: JSON.stringify(filters)\n        });\n    }\n    async getPredictionRegions() {\n        return this.request(\"/api/predictions/regions\");\n    }\n    async getPredictionFactors() {\n        return this.request(\"/api/predictions/factors\");\n    }\n    async getPredictionModelInfo() {\n        return this.request(\"/api/predictions/model-info\");\n    }\n    async predictionHealthCheck() {\n        return this.request(\"/api/predictions/health\");\n    }\n    async healthCheck() {\n        return this.request(\"/api/fires/health\");\n    }\n    constructor(baseUrl = API_BASE_URL){\n        this.baseUrl = baseUrl;\n    }\n}\nconst apiClient = new ApiClient();\n// Utility functions\nconst formatFireTime = (date, time)=>{\n    try {\n        const hour = time.slice(0, 2);\n        const minute = time.slice(2, 4);\n        return \"\".concat(hour, \":\").concat(minute);\n    } catch (e) {\n        return time;\n    }\n};\nconst formatFireDate = (dateString)=>{\n    try {\n        const date = new Date(dateString);\n        return date.toLocaleDateString(\"en-US\", {\n            year: \"numeric\",\n            month: \"short\",\n            day: \"numeric\"\n        });\n    } catch (e) {\n        return dateString;\n    }\n};\nconst getConfidenceColor = (confidence)=>{\n    if (confidence >= 80) return \"text-fire-red\";\n    if (confidence >= 60) return \"text-fire-orange\";\n    return \"text-fire-yellow\";\n};\nconst getConfidenceBg = (confidence)=>{\n    if (confidence >= 80) return \"bg-fire-red/10 border-fire-red/20\";\n    if (confidence >= 60) return \"bg-fire-orange/10 border-fire-orange/20\";\n    return \"bg-fire-yellow/10 border-fire-yellow/20\";\n};\nconst getPowerSeverityColor = (frp)=>{\n    if (frp >= 20) return \"text-red-600\" // High power - red\n    ;\n    if (frp >= 5) return \"text-orange-600\" // Medium power - orange\n    ;\n    return \"text-green-600\" // Low power - green\n    ;\n};\nconst getPowerSeverityBg = (frp)=>{\n    if (frp >= 20) return \"bg-red-100 border-red-200\" // High power - red background\n    ;\n    if (frp >= 5) return \"bg-orange-100 border-orange-200\" // Medium power - orange background\n    ;\n    return \"bg-green-100 border-green-200\" // Low power - green background\n    ;\n};\nconst getPowerSeverityLabel = (frp)=>{\n    if (frp >= 100) return \"extreme\";\n    if (frp >= 50) return \"critical\";\n    if (frp >= 20) return \"high\";\n    if (frp >= 10) return \"medium\";\n    if (frp >= 5) return \"low-medium\";\n    return \"low\";\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api.ts\n"));

/***/ })

});